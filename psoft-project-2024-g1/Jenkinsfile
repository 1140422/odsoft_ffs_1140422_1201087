pipeline {
    agent any

    tools {
        maven 'Maven3'
        jdk 'Java17'
    }

    environment {
        APP_NAME = "psoft-g1"
        DOCKER_IMAGE = "psoft-g1-app"
        DOCKER_TAG = "latest"
    }

    parameters {
        choice(
            name: 'DEPLOY_MODE',
            choices: ['dev', 'staging', 'prod', 'all'],
            description: 'Choose which environment(s) to deploy to'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir('psoft-project-2024-g1') {
                    script {
                        if (isUnix()) {
                            sh 'mvn clean package -DskipTests'
                        } else {
                            bat 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                dir('psoft-project-2024-g1') {
                    script {
                        if (isUnix()) {
                            sh 'mvn checkstyle:check spotbugs:spotbugs -DskipTests'
                        } else {
                            bat 'mvn checkstyle:check spotbugs:spotbugs -DskipTests'
                        }
                    }
                }
            }
            post {
                always {
                    recordIssues tools: [
                        checkStyle(pattern: 'psoft-project-2024-g1/target/checkstyle-result.xml'),
                        spotBugs(pattern: 'psoft-project-2024-g1/target/spotbugsXml.xml')
                    ]
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir('psoft-project-2024-g1') {
                    script {
                        if (isUnix()) {
                            sh 'mvn test'
                        } else {
                            bat 'mvn test'
                        }
                    }
                }
            }
            post {
                always {
                    junit 'psoft-project-2024-g1/target/surefire-reports/*.xml'
                    recordCoverage(tools: [[parser: 'JACOCO']],
                        id: 'jacoco', name: 'JaCoCo Coverage',
                        sourceCodeRetention: 'EVERY_BUILD',
                        qualityGates: [
                            [threshold: 10.0, metric: 'LINE', baseline: 'PROJECT', unstable: true],
                            [threshold: 2.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]
                        ])
                }
            }
        }

        stage('Mutation Tests') {
            steps {
                dir('psoft-project-2024-g1') {
                    script {
                        if (isUnix()) {
                            sh 'mvn pitest:mutationCoverage'
                        } else {
                            bat 'mvn pitest:mutationCoverage'
                        }
                    }
                }
            }
            post {
                always {
                    publishHTML(target: [
                        allowMissing: true,
                        keepAll: true,
                        reportDir: 'psoft-project-2024-g1/target/pit-reports',
                        reportFiles: 'index.html',
                        reportName: 'Mutation Testing Report'
                    ])
                }
            }
        }

        stage('Integration Tests') {
            steps {
                dir('psoft-project-2024-g1') {
                    script {
                        if (isUnix()) {
                            sh 'mvn verify'
                        } else {
                            bat 'mvn verify'
                        }
                    }
                }
            }
            post {
                always {
                    junit 'psoft-project-2024-g1/target/failsafe-reports/*.xml'
                }
            }
        }

        stage('Deploy DEV') {
            when {
                expression { params.DEPLOY_MODE == 'dev' || params.DEPLOY_MODE == 'all' }
            }
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                        echo "Checking for any process using port 8081..."
                        PID=$(lsof -ti:8081)
                        if [ -n "$PID" ]; then
                            echo "Killing process(es) on port 8081: $PID"
                            kill -9 $PID
                        else
                            echo "No process found using port 8081."
                        fi
                        nohup java -jar psoft-project-2024-g1/target/psoft-g1-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev > dev_app.log 2>&1 &
                        echo "Spring Boot started (check dev_app.log)"
                        echo "App starting at http://localhost:8081"
                        '''
                    } else {
                        powershell '''
                        Write-Host "Checking for any process using port 8081..."
                        $pids = (Get-NetTCPConnection -LocalPort 8081 -ErrorAction SilentlyContinue).OwningProcess | Sort-Object -Unique
                        if ($pids) {
                            foreach ($pid in $pids) {
                                try { Stop-Process -Id $pid -Force } catch {}
                            }
                        }
                        Start-Process "java" -ArgumentList "-jar psoft-project-2024-g1\\target\\psoft-g1-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev" -WindowStyle Hidden
                        echo "Spring Boot started (check dev_app.log)"
                        echo "App starting at http://localhost:8081"
                        '''
                    }
                }
            }
        }

        stage('Deploy STAGING') {
            when {
                expression { params.DEPLOY_MODE == 'staging' || params.DEPLOY_MODE == 'all' }
            }
            steps {
                dir('psoft-project-2024-g1') {
                    script {
                        if (isUnix()) {
                            sh '''
                            docker-compose down psoft-staging || true
                            docker-compose build psoft-staging
                            docker-compose up -d psoft-staging
                            '''
                        } else {
                            bat '''
                            docker-compose down psoft-staging || echo "No existing container."
                            docker-compose build psoft-staging
                            docker-compose up -d psoft-staging
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy PRODUCTION') {
            when {
                expression { params.DEPLOY_MODE == 'prod' || params.DEPLOY_MODE == 'all' }
            }
            steps {
                dir('psoft-project-2024-g1') {
                    script {
                        if (isUnix()) {
                            sh '''
                            docker-compose down psoft-prod || true
                            docker-compose build
                            docker-compose up -d psoft-prod
                            '''
                        } else {
                            bat '''
                            docker-compose down psoft-prod || echo "No existing production containers."
                            docker-compose build
                            docker-compose up -d psoft-prod
                            '''
                        }
                    }
                }
                echo "Production app and H2 database started."
                echo "App: http://localhost:8083, H2 console: http://localhost:8084"
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
